services:
  app:
    image: fastcampus/fast-ecommerce:latest
    ports:
      - 8080:8080
    environment:
      SPRING_PROFILES_ACTIVE: dev-docker
    depends_on:
      - mysql
    networks:
      default_bridge:
        ipv4_address: 172.26.0.10

  mysql:
    image: mysql
    platform: linux/amd64
    ports:
      - 11306:3306
    volumes:
      #호스트에 있는 디렉토리와 컨테이너에 있는 디렉토리를 연결 시켜주는 역할
      #항상 왼쪽은 호스트 오른쪽은 도커 컨테이너
      #docker-entrypoint-initdb.d 여기에 파일을 가져다 놓으면 실행될 때 알아서 실행되기 때문에 초기 스키마 생성이나 테이블 생성을 위한 파일을 여기에 가져다 놓음
      - /Users/jeonghyeonjin/Documents/Github/ecommerce-order-payment-system/src/main/resources/initdb:/docker-entrypoint-initdb.d
    command:
      - '--character-set-server=utf8mb4'
      - '--collation-server=utf8mb4_unicode_ci'
      - '--lower_case_table_names=1'
    environment:
      MYSQL_ROOT_PASSWORD: testbed
      MYSQL_DATABASE: service-labs
    networks:
      default_bridge:
        ipv4_address: 172.26.0.14

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      #zookeeper를 구성하는 아이디 ,이 값은 중복되면 안된다.
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "22181:2181"
    networks:
      default_bridge:
        ipv4_address: 172.26.0.11

#  kafka:
#    image: wurstmeister/kafka
#    platform: linux/amd64
#    depends_on:
#      - zookeeper
#    ports:
#      - "19092:19092"
#      - "19094:19094"
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      #카프카가 주키퍼에 커넥션하기 위한 주소를 설정; "서비스 이름: 내부포트" 로 설정한다.
#      #카프카랑 주키퍼는 1:1이기 때문에 카프카를 하나 늘릴 려면 주키퍼를 하나 더 늘려야한다.
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      #Kafka 서비스용 IpAddr;Port - Kafka가 서비스를 제공하는 주소와 포트(다수 등록 가능)
#      KAFKA_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://kafka:19094
#      # KAFKA_ADVERTISED_LISTENERS : Kafka Client가 받는 서비스 IP_Addr: port / 클라이언트에게 metadata와 함께 반환할 서버 주소
#      #Internal : 내부망에서 접근 가능한 IP Address -Docker 내부 네트워크 대역에서 Kafka 간의 내부 통신을 위한 IP Address (1,3,5,7,9개의 브로커들과 통신을 할 때 내부단에서 통신을 할 때)
#      #External : 외부망에서 접근 가능한 IP Address - Docker 외부 네트워크 대역에서 Kafka와 통신을 위한 IP Address
#      #localhost:19094에 접근하면 포트포워딩을 통해 kafka:19092로 바뀐다
#      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://localhost:19094
#      #내부와 외부의 네트워크를 구분하기 위한 설정 또는 보안 관련 설정
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
#      #도커를 통해 브로커를 간의 통신을 하기 위한 네트워크
#      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      KAFKA_JMX_PORT: 9092
#      KAFKA_JMX_HOSTNAME: localhost
#      JMX_PORT: 9092
#    networks:
#      default_bridge:
#        ipv4_address: 172.26.0.12
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "19092:19092"
      - "19094:19094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://localhost:19094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: INTERNAL://kafka:19092,EXTERNAL://kafka:19094
      KAFKA_AUTO_CREATE_TOPIC_ENABLE: false
    networks:
      default_bridge:
        ipv4_address: 172.26.0.12

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    environment:
      #N개가 된다면 더 추가하면 된다
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:19092'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'
    ports:
      - 8085:8085
    depends_on:
      - kafka
    networks:
      default_bridge:
        ipv4_address: 172.26.0.13

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - 8081:8080
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_NAME=Fast-Ecommerce-Kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:19092
    networks:
      default_bridge:
        ipv4_address: 172.26.0.18

  kafka-exporter:
    image: bitnami/kafka-exporter:latest
    depends_on:
      - kafka
    ports:
      - "9308:9308"
    command: [ "--kafka.server=kafka:19092"]
    networks:
      default_bridge:
        ipv4_address: 172.26.0.15

  prometheus:
    image: bitnami/prometheus:latest  # ✅ M1 지원 이미지
    container_name: prometheus
    platform: linux/arm64
    ports:
      - "9090:9090"
    volumes:
      - /Users/jeonghyeonjin/Documents/Github/ecommerce-order-payment-system/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      default_bridge:
        ipv4_address: 172.26.0.16

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    platform: linux/arm64
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - prometheus
    networks:
      default_bridge:
        ipv4_address: 172.26.0.17

networks:
  default_bridge:
    ipam:
      driver: default
      config:
        - subnet: 172.26.0.0/16